{"/home/travis/build/npmtest/node-npmtest-orchestrate/test.js":"/* istanbul instrument in package npmtest_orchestrate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-orchestrate/lib.npmtest_orchestrate.js":"/* istanbul instrument in package npmtest_orchestrate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_orchestrate = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_orchestrate = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-orchestrate/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-orchestrate && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_orchestrate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_orchestrate\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_orchestrate.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_orchestrate.rollup.js'] =\n            local.assetsDict['/assets.npmtest_orchestrate.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_orchestrate.__dirname +\n                    '/lib.npmtest_orchestrate.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-orchestrate/node_modules/orchestrate/index.js":"// Copyright 2013 Bowery Software, LLC\n/**\n * @fileoverview Expose db client.\n */\n\nmodule.exports = require('./lib/client')\n","/home/travis/build/npmtest/node-npmtest-orchestrate/node_modules/orchestrate/lib/client.js":"// Copyright 2013 Bowery Software, LLC\n/**\n * @fileoverview Orchestrate API Client.\n */\n\n\n// Module Dependencies.\nvar request = require('request')\nvar util = require('util')\nvar url = require('url')\nvar Q = require('kew')\nvar assert = require('assert')\nvar SearchBuilder = require('./search')\nvar parseLinks = require('parse-link-header')\nvar GraphBuilder = require('./graph')\nvar EventBuilder = require('./event')\nvar PatchBuilder = require('./patch')\nvar pjson = require('../package.json')\n\n/**\n * Creates an instance of Client which can be used to access\n * the Orchestrate API.\n *\n * @constructor\n * @param {string} token\n * @param {string} apiEndpoint\n */\nfunction Client (token, apiEndpoint) {\n  assert(token, 'API key required.');\n  if (!(this instanceof Client)) {\n    return new Client(token, apiEndpoint);\n  }\n\n  /**\n   * HTTP content-type.\n   * @type {string}\n   */\n  this.contentType = 'application/json';\n\n  /**\n   * API token used for HTTP Authentication.\n   * @type {string}\n   * @protected\n   */\n  this._token = token;\n\n  /**\n   * API Endpoint used for connecting to DB.\n   * @type {string}\n   * @protected\n   */\n  this._apiEndPoint = apiEndpoint || this.constructor.ApiEndPoint;\n\n  /**\n   * Identifies the orchestrate.js client as the UserAgent to Orchestrate Service.\n   * @type {string}\n   * @protected\n   */\n  this._userAgent = 'orchestrate.js/' + pjson.version + ' (Bowery.io; node.js ' + process.version + ')';\n}\n\nClient.ApiEndPoint = 'api.orchestrate.io'\n\nClient.ApiProtocol = 'https:';\n\n/**\n * Api version\n * @enum {string}\n */\nClient.ApiVersion = 'v0';\n\n\n/**\n * Get data from collection by key-value.\n * @param {string} collection\n * @param {string} key\n * @param {object} params KV get params (with_fields,without_fields)\n * @return {Promise}\n */\nClient.prototype.get = function (collection, key, ref, params) {\n  assert(collection && key, 'Collection and key required.');\n  if (!ref) {\n    return this._get(this.generateApiUrl([collection, key], params));\n  } else {\n    return this._get(this.generateApiUrl([collection, key, 'refs', ref], params));\n  }\n}\n\n\n/**\n * Get list of data from collection.\n * @param {string} collection\n * @param {object} params Listing params (startKey,afterKey,beforeKey,endKey,with_fields,without_fields)\n * @param {string} startKey\n * @param {string} endKey\n * @return {Promise}\n */\nClient.prototype.list = function (collection, params) {\n  assert(collection, 'Collection required.')\n  if (typeof params == 'number') { //deprecated, prefer passing map params.\n    params = {limit:params}\n  }\n  return this._get(this.generateApiUrl([collection], params))\n}\n\n\n/**\n * Get list of refs associated with a key from a collection.\n * @param {string} collection\n * @param {object} params Listing params (limit,offset,values,with_fields,without_fields)\n * @return {Promise}\n */\nClient.prototype.list_refs = function (collection, key, params) {\n  assert(collection && key, 'Collection and key required.')\n  if (typeof params == 'number') { //deprecated, prefer passing map params.\n    params = {limit:params}\n  }\n  return this._get(this.generateApiUrl([collection, key, 'refs'], params))\n}\n\n\n/**\n * Insert a key-value, allowing the server to generate a random key\n * @param {string} collection\n * @param {Object} data\n */\nClient.prototype.post = function (collection, data) {\n  assert(collection && data, 'Collection and JSON object required.')\n  return this._post(this.generateApiUrl([collection]), data);\n}\n\n\n/**\n * Put data in collection by key-value\n * @param {string} collection\n * @param {string} key\n * @param {Object} data\n * @param {string|boolean} match\n * @return {Promise}\n */\nClient.prototype.put = function (collection, key, data, match) {\n  assert(collection && key && data, 'Collection, key, and JSON object required.')\n  var header = {}\n  if (typeof match == 'string') header['If-Match'] = this._quote(match)\n  else if (typeof match == 'boolean' && match === false) header['If-None-Match'] = '\"*\"'\n  return this._put(this.generateApiUrl([collection, key]), data, header)\n}\n\n\n/**\n * Merge a JSON document into an existing key\n * @param {string} collection\n * @param {string} key\n * @param {Object} data\n * @param {Object} options - Map with the following possible entries:\n *       {string} match - the item ref used to check for concurrent update (ie to make\n *               sure the item was not changed and the patch is applying to\n *               the right version of the item).\n *       {boolean} upsert - set to true if this patch should be treated as an\n *               insert when the item is not present.\n *\n * @return {Promise}\n */\nClient.prototype.merge = function (collection, key, data, options) {\n  assert(collection && key && data, 'Collection, key and JSON object required.')\n  options = options || {}\n  if (typeof options === 'string') {\n    // legacy behavior, 4th arg was the 'match' ref string.\n    options = {match:options}\n  }\n  var match = options.match;\n  var upsert = options.upsert === true;\n  var header = {'Content-Type': 'application/merge-patch+json'}\n  if (typeof match == 'string') header['If-Match'] = this._quote(match)\n  return this._patch(this.generateApiUrl([collection, key], {upsert:upsert}), data, header)\n}\n\n/**\n * Patch a JSON document using a specific set of operations\n * @param {string} collection\n * @param {string} key\n * @param {[Object]} patchOps array of operations; see http://orchestrate.io/docs/apiref#keyvalue-patch\n * @param {Object} options - Map with the following possible entries:\n *       {string} match - the item ref used to check for concurrent update (ie to make\n *               sure the item was not changed and the patch is applying to\n *               the right version of the item).\n *       {boolean} upsert - set to true if this patch should be treated as an\n *               insert when the item is not present.\n * @return {Promise}\n */\nClient.prototype.patch = function (collection, key, patchOps, options) {\n  assert(collection && key && patchOps, 'Collection, key and JSON object required.')\n  assert(patchOps.length > 0, 'At least one operation is required in a patch operation.');\n\n  options = options || {}\n  if (typeof options === 'string') {\n    // legacy behavior, 4th arg was the 'match' ref string.\n    options = {match:options}\n  }\n  var match = options.match;\n  var upsert = options.upsert === true;\n  var header = {'Content-Type': 'application/json-patch+json'}\n  if (typeof match == 'string') header['If-Match'] = this._quote(match)\n  return this._patch(this.generateApiUrl([collection, key], {upsert:upsert}), patchOps, header)\n}\n\n\n/**\n * Remove data from collection by key-value.\n * @param {string} collection\n * @param {string} key\n * @param {boolean} purge\n * @return {Promise}\n */\nClient.prototype.remove = function (collection, key, purge) {\n  assert(collection && key, 'Collection and key required.')\n  return this._del(this.generateApiUrl([collection, key], {purge: purge}))\n}\n\n\n/**\n * Search collection by key.\n * @param {string} collection\n * @param {string} query\n * @param {Object} options (Optional)\n * @return {Promise}\n */\nClient.prototype.search = function (collection, query, options) {\n  assert(collection && query, 'Collection and query required.')\n  options = options || {}\n  options.query = query;\n  return this._get(this.generateApiUrl([collection], options))\n}\n\n\n/**\n * Search across collections by key.\n * @param {string} query\n * @param {Object} options (Optional)\n * @return {Promise}\n */\nClient.prototype.searchAcrossCollections = function (query, options) {\n  assert(query, 'Query required.')\n  options = options || {}\n  options.query = query;\n  return this._get(this.generateApiUrl([], options))\n}\n\n\n/**\n * Check if key is valid.\n * @return {Promise}\n */\nClient.prototype.ping = function () {\n  return this._head(this.generateApiUrl())\n}\n\n\n/**\n * Delete a collection.\n * @param {string} collection\n * @return {Promise}\n */\nClient.prototype.deleteCollection = function (collection) {\n  assert(collection, 'Collection required.')\n  return this._del(this.generateApiUrl([collection]) + '?force=true')\n}\n\n\n/**\n * Create new search builder.\n * @return {SearchBuilder}\n */\nClient.prototype.newSearchBuilder = function () {\n  return new SearchBuilder()\n    .setWrite(false)\n    .setDelegate(this)\n}\n\n\n/**\n * Create new graph builder.\n * @return {GraphBuilder}\n */\nClient.prototype.newGraphBuilder = function () {\n  return new GraphBuilder()\n    .setWrite(true)\n    .setDelegate(this)\n}\n\n\n/**\n * Create new graph reader.\n * @return {GraphBuilder}\n */\nClient.prototype.newGraphReader = function () {\n  return new GraphBuilder()\n    .setWrite(false)\n    .setDelegate(this)\n}\n\n\n/**\n * Create new event builder.\n * @return {EventBuilder}\n */\nClient.prototype.newEventBuilder = function () {\n  return new EventBuilder()\n    .setWrite(true)\n    .setDelegate(this)\n}\n\n\n/**\n * Create new event reader.\n * @return {EventBuilder}\n */\nClient.prototype.newEventReader = function () {\n  return new EventBuilder()\n    .setWrite(false)\n    .setDelegate(this)\n}\n\n/**\n * Create new patch builder.\n * @return {PatchBuilder}\n */\nClient.prototype.newPatchBuilder = function(collection, key) {\n  return new PatchBuilder(collection, key)\n    .setWrite(true)\n    .setDelegate(this)\n}\n\n\n/**\n * GET request with authentication.\n * @param {string} url\n * @return {Promise}\n * @protected\n */\nClient.prototype._get = function (url) {\n  return this._request('GET', url)\n}\n\n\n/**\n * POST request with authentication.\n * @param {string} url\n * @param {Object} data\n * @param {Object} header\n * @return {Promise}\n * @protected\n */\nClient.prototype._post = function (url, data, header) {\n  return this._request('POST', url, data, header)\n}\n\n\n/**\n * PUT request with authentication.\n * @param {string} url\n * @param {Object} data\n * @param {Object} header\n * @return {Promise}\n * @protected\n */\nClient.prototype._put = function (url, data, header) {\n  return this._request('PUT', url, data, header)\n}\n\n\n/**\n * DELETE request with authentication.\n * @param {string} url\n * @return {Promise}\n * @protected\n */\nClient.prototype._del = function (url, header) {\n  return this._request('DELETE', url, undefined, header)\n}\n\n\n/**\n * PATCH request with authentication.\n * @param {string} url\n * @param {Object} data\n * @param {Object} header\n * @return {Promise}\n * @protected\n */\nClient.prototype._patch = function (url, data, header) {\n  return this._request('PATCH', url, data, header)\n}\n\n/**\n * HEAD request with authentication.\n * @param {string} url\n * @return {Promise}\n * @protected\n */\nClient.prototype._head = function (url) {\n  return this._request('HEAD', url)\n}\n\n\n/**\n * Makes a request to the Orchestrate api.  The request will be set up with all\n * the necessary headers (eg auth, content type, user agent, etc).\n *\n * @param {string} method The HTTP method for the request\n * @param {string} url The full endpoint url (including query portion).\n * @param {Object} data (optional) The body of the request (will be converted to json).\n * @param {Object} header (optional) Any additional headers to go along with the request.\n * @return {Promise}\n * @protected\n */\nClient.prototype._request = function (method, url, data, headers) {\n  var defer = Q.defer()\n  headers = headers || {}\n  if (!headers['Content-Type']) headers['Content-Type'] = this.contentType\n  headers['User-Agent'] = this._userAgent\n  request({\n    method: method,\n    url : url,\n    auth: {user: this._token},\n    headers: headers,\n    body: JSON.stringify(data),\n    gzip: true\n  }, defer.makeNodeResolver())\n\n  return defer.promise\n  .then(this._validateResponse.bind(this))\n  .then(this._parseLinks.bind(this))\n  .then(this._parsePathMeta.bind(this))\n}\n\n\n/**\n * Quote the provided string if not already quoted.\n * @param {string} str\n * @return {string}\n * @protected\n */\nClient.prototype._quote = function (str) {\n  return str.charAt(0) == '\"' ? str : '\"' + str + '\"'\n}\n\n\n/**\n * Ensure valid response.\n * @param {Request} req\n * @return {(Request|Promise)}\n */\nClient.prototype._validateResponse = function (res) {\n  if (res.body) {\n    try {\n      res.body = JSON.parse(res.body)\n    } catch (e) {}\n  }\n\n  if (!~[200, 201, 204].indexOf(res.statusCode))\n    throw res\n\n  return res\n}\n\n/**\n * Parses all links from the \"Link\" http response header. The parsed links\n * are made available on the result as result.links.  Each link is an object\n * with the following properties:\n * url - The url for the link (may be relative)\n * rel - The link header's \"rel\" value (the logical link 'name'),\n * paramName* - Any url query parameters are available directly on the link\n * get() - Function to fetch the link, returns a promise.\n * @param {Object} res The response to parse the 'Link' header from\n * @param {Object} res The respons (so this function can be chained in\n *         promise calls).\n */\nClient.prototype._parseLinks = function (res) {\n  res.links = parseLinks(res.headers['link'])\n  if (res.links) {\n    for (var rel in res.links) {\n      var link = res.links[rel]\n      link.get = function (linkUrl) {\n        return this._get(Client.ApiProtocol + '//' + this._apiEndPoint + linkUrl)\n      }.bind(this, link.url)\n    }\n  }\n  return res\n}\n\n/**\n * Parses any path meta from the response. This includes parsing the Location\n * response header for PUTs and POSTs as well as the ETag response header\n * to parse the item 'ref'. The result path meta will be made available on the\n * response object under 'path'.\n */\nClient.prototype._parsePathMeta = function (res) {\n  var loc = res.headers['location']\n  if (!loc || loc.indexOf('/'+Client.ApiVersion+'/') != 0) {\n    return res\n  }\n\n  var locParts = res.headers['location'].split('/')\n  if (locParts.length < 4) {\n    return res\n  }\n\n  var path = {\n    collection: locParts[2],\n    key: locParts[3]\n  }\n\n  if (res.headers['etag']) {\n    path.ref = res.headers['etag'].replace(/\"/g, '')\n  }\n\n  res.path = path\n\n  if (locParts.length > 7 && locParts[4] === 'events') {\n    path['type'] = locParts[5]\n    path.timestamp = parseInt(locParts[6])\n    // this is the string representation of the Long in this case, and not\n    // the hex value. Orchestrate detects the difference, and it is only\n    // important that the JS client has a string representation it can use\n    // because if used as a raw number, JS will round, changing the value.\n    // For this same reason, path.ordinal should never be used in JS.\n    path.ordinal_str = locParts[7]\n  }\n\n  return res\n}\n\n\n/**\n * Generates and formats api url.\n * @param {Array.<string>} path\n * @param {Object} query\n * @return {string}\n */\nClient.prototype.generateApiUrl = function (path, query) {\n  var pathname = ''\n\n  if (!path) path = []\n\n  for (var i = 0; i < path.length; i++)\n    pathname += '/' + encodeURIComponent(path[i])\n\n  // Remove undefined key-value pairs.\n  if (query)\n    Object.keys(query).forEach(function (key) {\n      if (query[key] == undefined)\n        delete query[key]\n      else if (util.isArray(query[key]))\n        query[key] = query[key].join(\",\")\n    })\n\n  return url.format({\n    protocol: Client.ApiProtocol,\n    host: this._apiEndPoint + '/' + Client.ApiVersion,\n    pathname: pathname,\n    query: query\n  })\n}\n\n\n// Module exports.\nmodule.exports = Client\n","/home/travis/build/npmtest/node-npmtest-orchestrate/node_modules/orchestrate/lib/search.js":"// Copyright 2013 Bowery Software, LLC\n/**\n * @fileoverview Search builder.\n */\n\n\n// Module Dependencies.\nvar assert = require('assert')\nvar Builder = require('./builder')\nvar BucketBuilder = require('./bucket_builder');\n\n/**\n * @constructor\n */\nfunction SearchBuilder () {\n  this._sortClauses = [];\n}\n\nvar util = require('util');\nutil.inherits(SearchBuilder, Builder)\n\n\n/**\n * Set collection.\n * @param {string} collection\n * @return {SearchBuilder}\n */\nSearchBuilder.prototype.collection = function (collection) {\n  assert(collection, 'Collection required.')\n  this._collection = collection\n  return this\n}\n\n\n/**\n * Set limit.\n * @param {number} limit\n * @return {SearchBuilder}\n */\nSearchBuilder.prototype.limit = function (limit) {\n  assert(limit, 'Limit required.')\n  this._limit = limit\n  return this\n}\n\n\n/**\n * Set offset.\n * @param {number} offset\n * @return {SearchBuilder}\n */\nSearchBuilder.prototype.offset = function (offset) {\n  assert.equal(typeof offset, 'number', 'Offset required.')\n  this._offset = offset\n  return this\n}\n\n\n/**\n * Set sort.\n * @param {string} field\n * @param {string} order\n * @return {SearchBuilder}\n * @deprecated Use sortBy() with fully qualified field names.\n */\nSearchBuilder.prototype.sort = function (field, order) {\n  assert(field, 'field required');\n  assert(order, 'order required');\n  if (field.indexOf('@path.') != 0) {\n    // TODO we should NOT be doing this default prefixing!\n    // removing will be a breaking change.\n    field = 'value.' + field;\n  }\n  var sortClause = field + ':' + order;\n  return this.sortBy(sortClause);\n}\n\n/**\n * Add random sort clause with an optional seed value.\n * @param {string=} seedValue Seed to use for random sorting (optional).\n * @return {SearchBuilder}\n */\nSearchBuilder.prototype.sortRandom = function (seedValue) {\n  var sortClause = \"_random\";\n  if (typeof(seedValue) !== \"undefined\") {\n    sortClause = sortClause + \":\" + seedValue;\n  }\n  return this.sortBy(sortClause);\n}\n\n/**\n * Add sort clauses.\n * @example\n * // adds a sort clause for the field value.age\n * searchBuilder.sortBy('value.age');\n * @example\n * // adds two sorts clauses for the field value.age and @path.key\n * searchBuilder.sortBy('value.age', '@path.key');\n * @example\n * // adds a sort clause for the field value.age in ascending order\n * searchBuilder.sortBy('value.age:asc');\n * @param {...string} sortClauses Sort clauses to add to the request.\n * @return {SearchBuilder}\n */\nSearchBuilder.prototype.sortBy = function () {\n  for(var i = 0; i < arguments.length; ++i) {\n    this._sortClauses.push(arguments[i]);\n  }\n  return this;\n}\n\n/**\n * Enable field-filtering, with a whitelist of field names\n * @example\n * // adds a whitelist field-filter for the field value.age\n * searchBuilder.withFields('value.age');\n * @example\n * // adds two whitelist field-filters, for the fields value.name and value.age\n * searchBuilder.withFields('value.name', 'value.age');\n * @param {...string} fieldNames Fully-qualified field names to use as whitelist field-filters\n * @return {SearchBuilder}\n */\nSearchBuilder.prototype.withFields = function () {\n  this.filterWithFields = this.filterWithFields || [];\n  this.filterWithFields = this.filterWithFields.concat(Array.prototype.slice.call(arguments));\n  return this;\n}\n\n/**\n * Enable field-filtering, with a blacklist of field names\n * @example\n * // adds a blacklist field-filter for the field value.age\n * searchBuilder.withoutFields('value.age');\n * @example\n * // adds two blacklist field-filters, for the fields value.name and value.age\n * searchBuilder.withoutFields('value.name', 'value.age');\n * @param {...string} fieldNames Fully-qualified field names to use as blacklist field-filters\n * @return {SearchBuilder}\n */\nSearchBuilder.prototype.withoutFields = function () {\n  this.filterWithoutFields = this.filterWithoutFields || [];\n  this.filterWithoutFields = this.filterWithoutFields.concat(Array.prototype.slice.call(arguments));\n  return this;\n}\n\n\n/**\n * Add new aggregate parameter.\n * @param {string} type\n * @param {string} path\n * @param {array} args\n * @return {SearchBuilder}\n */\nSearchBuilder.prototype.aggregate = function (type, path, args) {\n  assert(type, 'type required');\n  assert(path, 'path required');\n  var parts = [ path, type ];\n  if (typeof(args) === \"string\" || util.isArray(args)) {\n    parts = parts.concat(args);\n  }\n  var _aggregate = parts.join(':');\n  if (this._aggregate)\n    this._aggregate = [this._aggregate, _aggregate].join(',');\n  else\n    this._aggregate = _aggregate;\n  return this;\n}\n\n/**\n * Add new 'top_values' aggregate parameter.\n * @param {string} path\n * @param {number} offset\n * @param {number} limit\n * @return {SearchBuilder}\n */\n SearchBuilder.prototype.top_values = function (path, offset, limit) {\n  if (typeof(offset) !== \"undefined\" && typeof(limit) !== \"undefined\") {\n    return this.aggregate('top_values', path, \"offset\", offset, \"limit\", limit);\n  }\n  assert(\n    typeof(offset) === \"undefined\" && typeof(limit) === \"undefined\",\n    \"offset or limit params must be included together, or not at all\"\n  );\n  return this.aggregate('top_values', path);\n }\n\n/**\n * Add new 'stats' aggregate parameter.\n * @param {string} path\n * @return {SearchBuilder}\n */\n SearchBuilder.prototype.stats = function (path) {\n  return this.aggregate('stats', path);\n }\n\n /**\n * Add new 'range' aggregate parameter.\n * @param {string} path\n * @param {array|function} buckets\n * @return {SearchBuilder}\n */\n SearchBuilder.prototype.range = function (path, buckets) {\n  var _buckets = buckets;\n  if (typeof(buckets) === 'function') {\n    _buckets = buckets(new BucketBuilder());\n    if (_buckets.build) _buckets = _buckets.build();\n  }\n\n  return this.aggregate('range', path, _buckets);\n }\n\n /**\n * Add new 'distance' aggregate parameter.\n * @param {string} path\n * @param {array|function} buckets\n * @return {SearchBuilder}\n */\nSearchBuilder.prototype.distance = function (path, buckets) {\n  var _buckets = buckets;\n  if (typeof(buckets) === 'function') {\n    _buckets = buckets(new BucketBuilder());\n    if (_buckets.build) _buckets = _buckets.build();\n  }\n\n  return this.aggregate('distance', path, _buckets);\n }\n\n /**\n * Add new 'time_series' aggregate parameter. The 'time' param, which must be\n * one of ('year', 'quarter', 'month', 'week', 'day', or 'hour'), determines\n * the bucketing interval for the time-series. The optional timezone param,\n * if present, must begin with a \"+\" or \"-\" character, followed by four digits\n * representing the hours and minutes of offset, relative to UTC. For example,\n * Eastern Standard Time (EST) would be represented as \"-0500\", since the time\n * in EST is five hours behind that of UTC.\n *\n * @param {string} path\n * @param {string} time\n * @param {string} timezone\n * @return {SearchBuilder}\n */\n SearchBuilder.prototype.time_series = function (path, time, timezone) {\n  if (typeof(timezone) === \"undefined\") {\n    return this.aggregate('time_series', path, time);\n  } else {\n    return this.aggregate('time_series', path, [ time, timezone ]);\n  }\n }\n\n /**\n  * Sets the 'kind' to search. Currently, Orchestrate defaults to\n  * searching only kv 'item's in the collection. To search only\n  * 'event' objects in the collection:\n  * searchBuilder.kinds('event')\n  * To search both 'event' and 'item' kinds, call with both:\n  * searchBuilder.kinds('item', 'event')\n  *\n  * @param {string} The Orchestrate 'kind' to be included ('item' or 'event').\n  * @return {SearchBuilder}\n  */\n SearchBuilder.prototype.kinds = function () {\n   var kinds = []\n   assert(arguments.length > 0, 'At least one kind required.')\n   for (var i=0; i<arguments.length; i++) {\n     var kind = arguments[i]\n     assert(kind === 'event' || kind === 'item' || kind === 'relationship', \"'item', 'event', or 'relationship' required.\")\n     kinds.push(kind)\n   }\n   this._kinds = kinds\n   return this\n}\n\n/**\n * Set query and send the search request to Orchestrate.\n *\n * @param {string} query\n * @return {SearchBuilder}\n */\nSearchBuilder.prototype.query = function (query) {\n  assert(query, 'Query required.')\n  this._query = query\n  return this._execute('get')\n}\n\n\n/**\n * Execute search.\n * @return {Object}\n * @protected\n */\nSearchBuilder.prototype._execute = function (method) {\n  assert(this._query, 'Query required.')\n  var pathArgs = []\n  if (this._collection) {\n    pathArgs.push(this._collection);\n  }\n  var query = this._query\n  if (this._kinds) {\n    query = '@path.kind:('+this._kinds.join(' ')+') AND (' + this._query + ')'\n  }\n  var url = this.getDelegate() && this.getDelegate().generateApiUrl(pathArgs, {\n    query: query,\n    limit: this._limit,\n    offset: this._offset,\n    sort: this._generateSort(),\n    aggregate: this._aggregate,\n    with_fields: this.filterWithFields,\n    without_fields: this.filterWithoutFields\n  })\n\n  return this.getDelegate()['_' + method](url)\n}\n\nSearchBuilder.prototype._generateSort = function () {\n  if (this._sortClauses.length > 0) {\n    return this._sortClauses.join(\",\");\n  }\n}\n\n\n\n// Module Exports.\nmodule.exports = SearchBuilder\n","/home/travis/build/npmtest/node-npmtest-orchestrate/node_modules/orchestrate/lib/builder.js":"// Copyright 2013 Bowery Software, LLC\n/**\n * @fileoverview Builder class. Defines methods used across\n * other builders.\n */\n\n\nfunction Builder () {}\n\n\n/**\n * Set delegate.\n * @param {Client} delegate\n * @return {Builder}\n */\nBuilder.prototype.setDelegate = function (delegate) {\n  this.delegate = delegate\n  return this\n}\n\n\n/**\n * Get delegate.\n * @return {Builder}\n */\nBuilder.prototype.getDelegate = function () {\n  return this.delegate\n}\n\n\n/**\n * Set write boolean.\n * @param {boolean} write\n * @return {Builder}\n */\nBuilder.prototype.setWrite = function (write) {\n  this.write = write\n  return this\n}\n\n\n// Module Exports.\nmodule.exports = Builder\n","/home/travis/build/npmtest/node-npmtest-orchestrate/node_modules/orchestrate/lib/bucket_builder.js":"// Copyright 2015 Orchestrate\n\n\nfunction BucketBuilder () {\n  this.buckets = [];\n}\n\nBucketBuilder.prototype.before = function (a) {\n  this.buckets.push('*~' + a);\n  return this;\n};\n\nBucketBuilder.prototype.between = function (a, b) {\n  this.buckets.push([a, b].join('~'));\n  return this;\n};\n\nBucketBuilder.prototype.after = function (a) {\n  this.buckets.push(a + '~*');\n  return this;\n};\n\nBucketBuilder.prototype.build = function () {\n  return this.buckets.join(':');\n}\n\nmodule.exports = BucketBuilder;\n","/home/travis/build/npmtest/node-npmtest-orchestrate/node_modules/orchestrate/lib/graph.js":"// Copyright 2013 Bowery Software, LLC\n/**\n * @fileoverview Graph relation builder.\n */\n\n\n// Module Dependencies.\nvar assert = require('assert')\nvar util = require('util')\nvar Builder = require('./builder')\n\n\n/**\n * @constructor\n */\nfunction GraphBuilder () {}\n\n\nutil.inherits(GraphBuilder, Builder)\n\n\n/**\n * Get a relationship.\n * @return {GraphBuilder}\n */\nGraphBuilder.prototype.get = function () {\n  this._method = 'get'\n  return this\n}\n\n\n/**\n * Create new relationship.\n * @return {GraphBuilder}\n */\nGraphBuilder.prototype.create = function () {\n  this._method = 'put'\n  return this\n}\n\n\n/**\n * Set graph data.\n * @param {Object} data\n * @return {GraphBuilder}\n */\nGraphBuilder.prototype.data = function (data) {\n  assert(data, 'Data required.')\n  this.data = data\n  return this\n}\n\n\n/**\n * Set \"If-Match\" header to the given ref value.\n * @param {String|boolean} ref. String ref for conditional update, or false\n *        for insert-if-absent (ie fail create if already present)\n * @return {GraphBuilder}\n */\nGraphBuilder.prototype.ref = function (ref) {\n  assert(typeof ref === 'string' || typeof ref === 'boolean', 'Ref required.')\n  this.ref = ref\n  return this\n}\n\n\n/**\n * Delete a relationship.\n * @return {GraphBuilder}\n */\nGraphBuilder.prototype.remove = function () {\n  this._method = 'del'\n  return this\n}\n\n\n/**\n * Set graph origin.\n * @param {string} collection\n * @param {string} key\n * @return {GraphBuilder}\n */\nGraphBuilder.prototype.from = function (collection, key) {\n  assert(collection && key, 'Collection and key required.')\n  this.collection = collection\n  this.key = key\n  return this\n}\n\n/**\n * Enable field-filtering, with a whitelist of field names\n * @example\n * // adds a whitelist field-filter for the field value.age\n * graphBuilder.withFields('value.age');\n * @example\n * // adds two whitelist field-filters, for the fields value.name and value.age\n * graphBuilder.withFields('value.name', 'value.age');\n * @param {...string} fieldNames Fully-qualified field names to use as whitelist field-filters\n * @return {GraphBuilder}\n */\nGraphBuilder.prototype.withFields = function () {\n  this.filterWithFields = this.filterWithFields || [];\n  this.filterWithFields = this.filterWithFields.concat(Array.prototype.slice.call(arguments));\n  return this;\n}\n\n/**\n * Enable field-filtering, with a blacklist of field names\n * @example\n * // adds a blacklist field-filter for the field value.age\n * graphBuilder.withoutFields('value.age');\n * @example\n * // adds two blacklist field-filters, for the fields value.name and value.age\n * graphBuilder.withoutFields('value.name', 'value.age');\n * @param {...string} fieldNames Fully-qualified field names to use as blacklist field-filters\n * @return {GraphBuilder}\n */\nGraphBuilder.prototype.withoutFields = function () {\n  this.filterWithoutFields = this.filterWithoutFields || [];\n  this.filterWithoutFields = this.filterWithoutFields.concat(Array.prototype.slice.call(arguments));\n  return this;\n}\n\n\n/**\n * Set graph relation.\n * @param {string} kind\n * @return {GraphBuilder}\n */\nGraphBuilder.prototype.related = function (kind) {\n  assert(kind, 'Kind of relation required.')\n\n  // Hoist the kind argument into an array.\n  if (util.isArray(kind)) {\n    this.kind = kind;\n  } else {\n    this.kind = Array.prototype.slice.call(arguments, 0)\n  }\n\n  // Make sure that the kind array is non-empty, and that its elements are non-empty strings.\n  assert(this.kind.length > 0, 'Kind of relation required.')\n  for (var i = 0; i < this.kind.length; i++) {\n    var k = this.kind[i];\n    assert(typeof(k) === \"string\" && k.length > 0, 'Kind must be a non-empty string')\n  }\n\n  // Call the execute method in any of these scenarios:\n  // (1) This is a read-only GraphBuilder, with toCollection & toKey empty. The execute\n  //     function will list (GET) all related items for the collection & key.\n  // (2) This is a read-only GraphBuilder, with toCollection & toKey non-empty. The\n  //     execute function will retrieve (GET) the data of a specific relationship.\n  // (3) This is a write-only GraphBuilder, with toCollection & toKey non-empty. The\n  //     execute function will submit (PUT) a new relationship.\n  if (!this.write || (this.toCollection && this.toKey)) {\n    return this._execute(this._method)\n  }\n  // Without toCollection and toKey on this write-only GraphBuilder, just return\n  // the builder, since there are still missing params.\n  return this\n}\n\n\n/**\n * Set graph destination.\n * @param {string} toCollection\n * @param {string} toKey\n * @return {Object}\n */\nGraphBuilder.prototype.to = function (toCollection, toKey) {\n  assert(toCollection && toKey, 'toCollection and toKey required.')\n  this.toCollection = toCollection\n  this.toKey = toKey\n\n  // Call the execute method only if the relationship kind has already been set.\n  // Otherwise, just return the builder, since there ae still missing params.\n  if (this.kind) {\n    return this._execute(this._method)\n  }\n  return this\n}\n\n\n/**\n * Set graph result limit.\n * @param {Number} limit\n * @return {Object}\n */\nGraphBuilder.prototype.limit = function (limit) {\n  assert(limit || limit == 0, 'Limit required.')\n  this.limit_value = limit\n  return this\n}\n\n\n/**\n * Set graph result offset.\n * @param {Number} offset\n * @return {Object}\n */\nGraphBuilder.prototype.offset = function (offset) {\n  assert.equal(typeof offset, 'number', 'Offset required.')\n  this.offset_value = offset\n  return this\n}\n\n\n/**\n * Quote the provided string if not already quoted.\n * @param {string} str\n * @return {string}\n * @protected\n */\nGraphBuilder.prototype._quote = function (str) {\n  return str.charAt(0) == '\"' ? str : '\"' + str + '\"'\n}\n\n\n/**\n * Execute graph read/write.\n * @param {string} method\n * @return {Object}\n * @protected\n */\nGraphBuilder.prototype._execute = function (method) {\n  // Make sure we have a from item key\n  assert(this.collection && this.key, \"'from' collection and key required.\")\n\n  // Make sure that the kind array is non-empty, and that its elements are non-empty strings.\n  assert(this.kind && this.kind.length > 0, 'Kind of relation required.')\n  for (var i = 0; i < this.kind.length; i++) {\n    var k = this.kind[i];\n    assert(typeof(k) === \"string\" && k.length > 0, 'Kind must be a non-empty string')\n  }\n\n  // Create an array of path components.\n  var pathArgs = []\n  pathArgs.push(this.collection)\n  pathArgs.push(this.key)\n  // The 'relation' path component is used for creating and retrieving individual relations.\n  // The 'relations' path component is used for traversing single-hop or multi-hop relationships.\n  if (this.write || (this._method === \"get\" && this.toCollection && this.toKey)) {\n    pathArgs.push('relation')\n  } else {\n    pathArgs.push('relations')\n  }\n  pathArgs = pathArgs.concat(this.kind)\n\n  // Destination collection and key are only mandatory during PUT and (non-listing) GET.\n  if (this.toCollection) pathArgs.push(this.toCollection)\n  if (this.toKey) pathArgs.push(this.toKey)\n\n  // Build the querystring\n  var query = {}\n  if (this._method == 'del') query['purge'] = true\n  if (this.limit_value)      query['limit'] = this.limit_value\n  if (this.offset_value)     query['offset'] = this.offset_value\n  if (this.filterWithFields)      query['with_fields'] = this.filterWithFields\n  if (this.filterWithoutFields)   query['without_fields'] = this.filterWithoutFields\n\n  // Build headers\n  var header = {}\n  if (typeof(this.ref) === 'string') {\n    header['If-Match'] = this._quote(this.ref)\n  } else if (typeof(this.ref) === 'boolean' && this.ref === false) {\n    header['If-None-Match'] = '\"*\"'\n  }\n\n  // Build the URL and return a callable delegate for this request\n  var url = this.getDelegate() && this.getDelegate().generateApiUrl(pathArgs, query)\n  return this.getDelegate()['_' + this._method](url, this.data, header)\n}\n\n\n// Module Exports.\nmodule.exports = GraphBuilder\n","/home/travis/build/npmtest/node-npmtest-orchestrate/node_modules/orchestrate/lib/event.js":"// Copyright 2013 Bowery Software, LLC\n/**\n * @fileoverview Event builder.\n */\n\n\n// Module Dependencies.\nvar assert = require('assert')\nvar Builder = require('./builder')\n\n/**\n * @constructor\n */\nfunction EventBuilder () {}\n\n\nrequire('util').inherits(EventBuilder, Builder)\n\n\n/**\n * Set event origin.\n * @param {string} collection\n * @param {string} key\n * @return {EventBuilder}\n */\nEventBuilder.prototype.from = function (collection, key) {\n  assert(collection && key, 'Collection and key required.')\n  this.collection = collection\n  this.key = key\n  return this\n}\n\n\n/**\n * Set event type.\n * @param {string} type\n * @return {EventBuilder}\n */\nEventBuilder.prototype.type = function (type) {\n  assert(type, 'Type required.')\n  this.type = type\n  return this\n}\n\n\n/**\n * Set time range start.\n * @param {number} time\n * @return {EventBuilder}\n */\nEventBuilder.prototype.start = function (time) {\n  assert(!this.write, 'Invalid operation.')\n  assert(time && typeof time == 'number', 'Time required (number).')\n  this.startTime = time\n  return this\n}\n\n\n/**\n * Set time range end.\n * @param {number} time\n * @return {EventBuilder}\n */\nEventBuilder.prototype.end = function (time) {\n  assert(!this.write, 'Invalid operation.')\n  assert(time && typeof time == 'number', 'Time required (number).')\n  this.endTime = time\n  return this\n}\n\n\n/**\n * Set event timestamp.\n * @param {number} time\n * @return {EventBuilder}\n */\nEventBuilder.prototype.time = function (time) {\n  assert(time && typeof time == 'number', 'Time required (number).')\n  this.timestamp = time\n  return this\n}\n\n\n/**\n * Set event ordinal.\n * @param {number} order\n * @return {EventBuilder}\n */\nEventBuilder.prototype.ordinal = function (order) {\n  assert(['number', 'string'].indexOf(typeof(order)) !== -1, 'Ordinal must be a number or a string.')\n  this.order = order\n  return this\n}\n\n\n/**\n * Set event data.\n * @param {Object} data\n * @return {EventBuilder}\n */\nEventBuilder.prototype.data = function (data) {\n  assert(data, 'Data required.')\n  this.data = data\n  return this\n}\n\n\n/**\n * Set event limit.\n * @param {Number} limit\n * @return {EventBuilder}\n */\nEventBuilder.prototype.limit = function (limit) {\n  assert(limit, 'Limit required.')\n  this.limit_value = limit\n  return this\n}\n\n\n/**\n * Set \"If-Match\" header to the given ref value.\n * @param {String} ref\n * @return {EventBuilder}\n */\nEventBuilder.prototype.ref = function (ref) {\n  assert(ref, 'Ref required.')\n  this.ref_value = ref\n  return this\n}\n\n\n/**\n * Get an event.\n * @return {Promise}\n */\nEventBuilder.prototype.get = function () {\n  assert(this.collection, 'Collection required.')\n  assert(this.key, 'Key required.')\n  assert(this.type, 'Type required.')\n  assert(this.timestamp, 'Timestamp required.')\n  assert(this.order, 'Ordinal required.')\n  return this._execute('get')\n}\n\n/**\n * List events.\n * @return {Promise}\n */\nEventBuilder.prototype.list = function () {\n  assert(this.collection, 'Collection required.')\n  assert(this.key, 'Key required.')\n  assert(this.type, 'Type required.')\n  return this._execute('list')\n}\n\n\n/**\n * Create an data.\n * @return {Promise}\n */\nEventBuilder.prototype.create = function () {\n  assert(this.collection, 'Collection required.')\n  assert(this.key, 'Key required.')\n  assert(this.type, 'Type required.')\n  return this._execute('post')\n}\n\n\n/**\n * Update an event.\n * @return {Promise}\n */\nEventBuilder.prototype.update = function () {\n  assert(this.collection, 'Collection required.')\n  assert(this.key, 'Key required.')\n  assert(this.type, 'Type required.')\n  assert(this.timestamp, 'Timestamp required.')\n  assert(this.order, 'Ordinal required.')\n  assert(this.data, 'Data required.')\n  return this._execute('put')\n}\n\n\n/**\n * Delete an event.\n * @return {Promise}\n */\nEventBuilder.prototype.remove = function () {\n  assert(this.collection, 'Collection required.')\n  assert(this.key, 'Key required.')\n  assert(this.type, 'Type required.')\n  assert(this.timestamp, 'Timestamp required.')\n  assert(this.order, 'Ordinal required.')\n  return this._execute('del')\n}\n\n/**\n * Enable field-filtering, with a whitelist of field names\n * @example\n * // adds a whitelist field-filter for the field value.age\n * eventBuilder.withFields('value.age');\n * @example\n * // adds two whitelist field-filters, for the fields value.name and value.age\n * eventBuilder.withFields('value.name', 'value.age');\n * @param {...string} fieldNames Fully-qualified field names to use as whitelist field-filters\n * @return {EventBuilder}\n */\nEventBuilder.prototype.withFields = function () {\n  this.filterWithFields = this.filterWithFields || [];\n  this.filterWithFields = this.filterWithFields.concat(Array.prototype.slice.call(arguments));\n  return this;\n}\n\n/**\n * Enable field-filtering, with a blacklist of field names\n * @example\n * // adds a blacklist field-filter for the field value.age\n * eventBuilder.withoutFields('value.age');\n * @example\n * // adds two blacklist field-filters, for the fields value.name and value.age\n * eventBuilder.withoutFields('value.name', 'value.age');\n * @param {...string} fieldNames Fully-qualified field names to use as blacklist field-filters\n * @return {EventBuilder}\n */\nEventBuilder.prototype.withoutFields = function () {\n  this.filterWithoutFields = this.filterWithoutFields || [];\n  this.filterWithoutFields = this.filterWithoutFields.concat(Array.prototype.slice.call(arguments));\n  return this;\n}\n\n\n/**\n * Execute event read/write.\n * @param {string} method\n * @return {Object}\n * @protected\n */\nEventBuilder.prototype._execute = function (method) {\n  var query = {}, pathArgs = [this.collection, this.key, 'events', this.type]\n  var header = {}\n  if (method === 'del') query['purge'] = true\n  if (method !== 'list') {\n    if (this.ref_value)   header['If-Match'] = '\"' + this.ref_value + '\"'\n    if (this.timestamp)   pathArgs.push(this.timestamp)\n    if (this.order)       pathArgs.push(this.order)\n  } else {\n    if (this.limit_value) query['limit'] =        this.limit_value\n    if (this.afterTime)   query['afterEvent'] =   this.afterTime\n    if (this.endTime)     query['endEvent'] =     this.endTime\n    if (this.startTime)   query['startEvent'] =   this.startTime\n    if (this.beforeTime)  query['beforeEvent'] =  this.beforeTime\n    if (this.filterWithFields)     query['with_fields'] =  this.filterWithFields\n    if (this.filterWithoutFields)  query['without_fields'] =  this.filterWithoutFields\n    method = 'get'\n  }\n  var url = this.getDelegate() && this.getDelegate().generateApiUrl(pathArgs, query)\n  return this.getDelegate()['_' + method](url, this.data, header)\n}\n\n\n// Module Exports.\nmodule.exports = EventBuilder\n","/home/travis/build/npmtest/node-npmtest-orchestrate/node_modules/orchestrate/lib/patch.js":"// Copyright 2014 Orchestrate, Inc.\n\n// Module Dependencies.\nvar assert = require('assert');\nvar Builder = require('./builder');\n\n/**\n * @constructor\n */\nfunction PatchBuilder (collection, key) {\n  this._collection = collection;\n  this._key = key;\n  this._ops = [];\n}\n\nrequire('util').inherits(PatchBuilder, Builder);\n\n/**\n * Add a value at the given path in the JSON document\n * @param {string} path - JSON document path; delimited by periods or slashes\n * @param {Object} value - Value to store at the given path\n */\nPatchBuilder.prototype.add = function (path, value) {\n  assert(path, 'Add requires a path parameter.');\n  this._ops.push({\"op\": \"add\", \"path\": path, \"value\": value});\n  return this;\n};\n\n/**\n * Remove a value from the given path in the JSON document\n * @param {string} path - JSON document path; delimited by periods or slashes\n */\nPatchBuilder.prototype.remove = function (path) {\n  assert(path, 'Remove requires a path parameter.');\n  this._ops.push({\"op\": \"remove\", \"path\": path});\n  return this;\n};\n\n/**\n * Replace a value at the given path in the JSON document\n * @param {string} path - JSON document path; delimited by periods or slashes\n * @param {Object} value - Value to replace at the given {path}\n */\nPatchBuilder.prototype.replace = function (path, value) {\n  assert(path, 'Replace requires a path parameter.');\n  this._ops.push({\"op\": \"replace\", \"path\": path, \"value\": value});\n  return this;\n};\n\n/**\n * Move a value at from one path in the JSON document to another path\n * @param {string} from - Source from which to move the value\n * @param {string} path - Destination document path for the value\n */\nPatchBuilder.prototype.move = function (from, path) {\n  assert(from && path, 'Move requires from and path parameters.');\n  this._ops.push({\"op\": \"move\", \"from\": from, \"path\": path});\n  return this;\n};\n\n/**\n * Copy a value at from one path in the JSON document to another path\n * @param {string} from - Source path from which to copy the value\n * @param {string} path - Destination path for the value\n */\nPatchBuilder.prototype.copy = function (from, path) {\n  assert(from && path, 'Copy requires from and path parameters.');\n  this._ops.push({\"op\": \"copy\", \"from\": from, \"path\": path});\n  return this;\n};\n\n/**\n * Test equality of a value at the specified JSON document path\n * @param {string} path - JSON document path; delimited by periods or slashes\n * @param {Object} value - Value to compare against\n * @param {boolean} negate - true if the test should be negated\n */\nPatchBuilder.prototype.test = function (path, value, negate) {\n  assert(path, 'Test requires a path parameter.');\n  var op = {\"op\": \"test\", \"path\": path, \"value\": value};\n  if (negate === true) op.negate = true;\n  this._ops.push(op);\n  return this;\n};\n\n/**\n * Test NON-equality of a value at the specified JSON document path\n * @param {string} path - JSON document path; delimited by periods or slashes\n * @param {Object} value - Value to compare against\n */\nPatchBuilder.prototype.testNot = function (path, value) {\n  return this.test(path, value, true);\n};\n\n/**\n * Increase the value at the specified JSON document path by the given number\n * @param {string} path - JSON document path; delimited by periods or slashes\n * @param {Object} value - Number by which to increase the value\n */\nPatchBuilder.prototype.inc = function (path, value) {\n  assert(path, 'Inc requires a path parameter.');\n  var op = {\n    op: \"inc\",\n    path: path,\n  };\n  if (value) op.value = value;\n  this._ops.push(op);\n  return this;\n};\n\n/**\n * Init the value at the specified JSON document path to the given value\n * ONLY if there isn't already a value there.\n * @param {string} path - JSON document path; delimited by periods or slashes\n * @param {Object} value - Value to initialize the path to (if not present).\n */\nPatchBuilder.prototype.init = function (path, value) {\n  assert(path, 'Init requires a path parameter.');\n  assert(value !== undefined, 'Init requires a value parameter.');\n  this._ops.push({\"op\": \"init\", \"path\": path, \"value\": value});\n  return this;\n};\n\n/**\n * Append the given value to an Array at the specified JSON document path.\n * If value is an Array, all items in the Array will be appended to the target\n * Array. Otherwise, the single value will be appended.\n * @param {string} path - JSON document path; delimited by periods or slashes\n * @param {Object|Array} value - Value(s) to append to the Array.\n */\nPatchBuilder.prototype.append = function (path, value) {\n  assert(path, 'Append requires a path parameter.');\n  assert(value !== undefined, 'Append requires a value parameter.');\n  this._ops.push({\"op\": \"append\", \"path\": path, \"value\": value});\n  return this;\n};\n\n/**\n * Merge the given value with an Object at the specified JSON document path.\n * @param {string} path - JSON document path; delimited by periods or slashes\n * @param {Object|Array} value - Value to merge in.\n */\nPatchBuilder.prototype.merge = function (path, value) {\n  assert(path, 'Merge requires a path parameter.');\n  assert(value !== undefined, 'Merge requires a value parameter.');\n  this._ops.push({\"op\": \"merge\", \"path\": path, \"value\": value});\n  return this;\n};\n\n/**\n * Apply the given value as a patch against an Object at the specified JSON document path.\n * @param {string} path - JSON document path; delimited by periods or slashes\n * @param {PatchBuilder|Array} value - Patch ops to apply.\n * @param {boolean} conditional - true if this nested patch op is conditional,\n *        meaning the test ops in this nested patch's ops list will only be used\n *        to determine whether the nested patch will be applied, but will not\n *        fail the overall patch operation.\n */\nPatchBuilder.prototype.patch = function (path, value, conditional) {\n  assert(path, 'Patch Op requires a path parameter.');\n  assert(value !== undefined, 'Patch Op requires a value parameter.');\n  assert(Array.isArray(value) || value instanceof PatchBuilder,\n    'Patch Op value must be an Array of ops or a PatchBuilder.');\n  var ops = value._ops || value;\n  var op = {\"op\": \"patch\", \"path\": path, \"value\": ops};\n  if (conditional === true) op.conditional = true;\n  this._ops.push(op);\n  return this;\n};\n\n/**\n * Convenience method for creating a conditional nested patch op. Just calls\n * PatchBuilder.prototype.patch with 'true' for the conditional argument.\n * @param {string} path - JSON document path; delimited by periods or slashes\n * @param {PatchBuilder|Array} value - Patch ops to apply.\n */\nPatchBuilder.prototype.patchIf = function (path, value) {\n  return this.patch(path, value, true);\n}\n\n/**\n * Make this patch an 'upsert'. If the key does not exist in the collection,\n * it will be created as an empty Json Object, then the patch applied.\n * Call with true or with no argument to enable upsert. The default behavior\n * is non-upsert, where the response will be 404 if trying to patch a key\n * that does not exist.\n *\n * @param {boolean} upsert - true to make this patch an upsert.\n */\nPatchBuilder.prototype.upsert = function (upsert) {\n  this._upsert = upsert !== false;\n  return this;\n}\n\n/**\n * return {Promise}\n */\nPatchBuilder.prototype.apply = function (match) {\n  assert(this.getDelegate(), 'No client delegate assigned');\n  return this.getDelegate().patch(this._collection, this._key, this._ops,\n    {match:match,upsert:this._upsert === true})\n};\n\n\n// Module Exports.\nmodule.exports = PatchBuilder;\n"}